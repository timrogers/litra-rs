name: Build, test and release

on: push

jobs:
  build:
    name: Build and test
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-unknown-linux-gnu,
              binary_name: linux-amd64,
              os: ubuntu-latest,
            }
          - {
              target: x86_64-apple-darwin,
              binary_name: darwin-amd64,
              os: macos-latest,
            }
          - {
              target: aarch64-apple-darwin,
              binary_name: darwin-arm64,
              os: macos-latest,
            }
          - {
              target: x86_64-pc-windows-msvc,
              binary_name: windows-amd64.exe,
              os: windows-latest,
            }
    runs-on: ${{ matrix.job.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install libudev-dev
        run: sudo apt-get update && sudo apt-get install libudev-dev
        if: matrix.job.os == 'ubuntu-latest'
      - name: Cache Rust dependencies
        uses: actions/cache@v4.0.2
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
      - name: Install latest Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustc, cargo
          toolchain: nightly
          override: true
          target: ${{ matrix.job.target }}
      - name: Run cargo build --release
        uses: actions-rs/cargo@v1
        with:
          args: --release --target=${{ matrix.job.target }}
          command: build
      - name: Sanitise Git ref for use in filenames
        id: sanitise_ref
        run: echo "::set-output name=value::$(echo "${{ github.ref_name }}" | tr '/' '_')"
      - name: Rename Windows binary to use structured filename
        run: |
          cp target/${{ matrix.job.target }}/release/litra.exe litra_${{ steps.sanitise_ref.outputs.value }}_${{ matrix.job.binary_name }}
        if: runner.os == 'Windows'
      - name: Rename Unix binary to use structured filename
        run: |
          rm target/${{ matrix.job.target }}/release/litra.d
          cp target/${{ matrix.job.target }}/release/litra* litra_${{ steps.sanitise_ref.outputs.value }}_${{ matrix.job.binary_name }}
        if: runner.os != 'Windows'
      - name: Write Apple signing key to a file (macOS only)
        env:
          APPLE_SIGNING_KEY_P12: ${{ secrets.APPLE_SIGNING_KEY_P12 }}
        run: echo "$APPLE_SIGNING_KEY_P12" | base64 -d -o key.p12
        if: matrix.job.os == 'macos-latest'
      - name: Write App Store Connect API key to a file (macOS only)
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: echo "$APP_STORE_CONNECT_API_KEY" > app_store_connect_api_key.json
        if: matrix.job.os == 'macos-latest'
      - name: Sign macOS binary (macOS only)
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: litra_${{ steps.sanitise_ref.outputs.value }}_${{ matrix.job.binary_name }}
          p12_file: key.p12
          p12_password: ${{ secrets.APPLE_SIGNING_KEY_PASSWORD }}
          sign: true
          sign_args: "--code-signature-flags=runtime"
        if: matrix.job.os == 'macos-latest'
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          path: litra_${{ steps.sanitise_ref.outputs.value }}_${{ matrix.job.binary_name }}
          name: litra_${{ steps.sanitise_ref.outputs.value }}_${{ matrix.job.binary_name }}
      - name: Archive macOS binary for notarisation (macOS only)
        run: zip litra_${{ steps.sanitise_ref.outputs.value }}_${{ matrix.job.binary_name }}.zip litra_${{ steps.sanitise_ref.outputs.value }}_${{ matrix.job.binary_name }}
        if: matrix.job.os == 'macos-latest'
      - name: Notarise signed macOS binary (macOS only)
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: litra_${{ steps.sanitise_ref.outputs.value }}_${{ matrix.job.binary_name }}.zip
          sign: false
          notarize: true
          app_store_connect_api_key_json_file: app_store_connect_api_key.json
        if: matrix.job.os == 'macos-latest'
  create_and_sign_macos_universal_binary:
    name: Create and sign macOS universal binary (macOS only)
    runs-on: macos-latest
    needs: build
    steps:
      - name: Sanitise Git ref for use in filenames
        id: sanitise_ref
        run: echo "::set-output name=value::$(echo "${{ github.ref_name }}" | tr '/' '_')"
      - name: Download macOS amd64 binary
        uses: actions/download-artifact@v4
        with:
          name: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-amd64
      - name: Download macOS arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-arm64
      - name: Create universal macOS binary
        run: lipo -create -output litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal litra_${{ steps.sanitise_ref.outputs.value }}_darwin-amd64 litra_${{ steps.sanitise_ref.outputs.value }}_darwin-arm64
      - name: Write Apple signing key to a file (macOS only)
        env:
          APPLE_SIGNING_KEY_P12: ${{ secrets.APPLE_SIGNING_KEY_P12 }}
        run: echo "$APPLE_SIGNING_KEY_P12" | base64 -d -o key.p12
      - name: Write App Store Connect API key to a file (macOS only)
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: echo "$APP_STORE_CONNECT_API_KEY" > app_store_connect_api_key.json
      - name: Sign macOS binary (macOS only)
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal
          p12_file: key.p12
          p12_password: ${{ secrets.APPLE_SIGNING_KEY_PASSWORD }}
          sign: true
          sign_args: "--code-signature-flags=runtime"
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          path: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal
          name: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal
      - name: Archive macOS binary for notarisation (macOS only)
        run: zip litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal.zip litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal
      - name: Notarise signed macOS binary (macOS only)
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal.zip
          sign: false
          notarize: true
          app_store_connect_api_key_json_file: app_store_connect_api_key.json
          
  cargo_publish_dry_run:
    name: Publish with Cargo in dry-run mode
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install libudev-dev
        run: sudo apt-get update && sudo apt-get install libudev-dev
      - name: Cache Rust dependencies
        uses: actions/cache@v4.0.2
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
      - name: Install latest Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustc, cargo
          toolchain: nightly
          override: true
      - name: Install cargo-edit
        run: cargo install cargo-edit
      - name: Set the version to a dummy version to allow publishing
        run: cargo set-version 9.9.9
      - name: Publish to Crates.io
        run: cargo publish --dry-run --allow-dirty
  create_github_release:
    name: Create release with binary assets
    runs-on: ubuntu-latest
    needs: 
      - build
      - create_and_sign_macos_universal_binary
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - name: Sanitise Git ref for use in filenames
        id: sanitise_ref
        run: echo "::set-output name=value::$(echo "${{ github.ref_name }}" | tr '/' '_')"
      - uses: actions/download-artifact@v4
        with:
          name: litra_${{ steps.sanitise_ref.outputs.value }}_linux-amd64
      - uses: actions/download-artifact@v4
        with:
          name: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-amd64
      - uses: actions/download-artifact@v4
        with:
          name: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-arm64
      - uses: actions/download-artifact@v4
        with:
          name: litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal
      - uses: actions/download-artifact@v4
        with:
          name: litra_${{ steps.sanitise_ref.outputs.value }}_windows-amd64.exe
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            litra_${{ steps.sanitise_ref.outputs.value }}_windows-amd64.exe
            litra_${{ steps.sanitise_ref.outputs.value }}_darwin-amd64
            litra_${{ steps.sanitise_ref.outputs.value }}_darwin-arm64
            litra_${{ steps.sanitise_ref.outputs.value }}_linux-amd64
            litra_${{ steps.sanitise_ref.outputs.value }}_darwin-universal
  publish_on_homebrew:
    name: Publish release on Homebrew
    runs-on: ubuntu-latest
    needs: create_github_release
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - name: Get released version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      - uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: litra
          download-url: https://github.com/timrogers/litra-rs/releases/download/${{ steps.get_version.outputs.VERSION }}/litra_${{ steps.get_version.outputs.VERSION }}_darwin-universal
          homebrew-tap: timrogers/homebrew-tap
          push-to: timrogers/homebrew-tap
          create-pullrequest: true
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
  cargo_publish:
    name: Publish with Cargo to Crates.io
    runs-on: ubuntu-latest
    needs:
      - create_github_release
      - cargo_publish_dry_run
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Install libudev-dev
        run: sudo apt-get update && sudo apt-get install libudev-dev
      - name: Cache Rust dependencies
        uses: actions/cache@v4.0.2
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
      - name: Install latest Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustc, cargo
          toolchain: nightly
          override: true
      - name: Publish to Crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_API_TOKEN }}
